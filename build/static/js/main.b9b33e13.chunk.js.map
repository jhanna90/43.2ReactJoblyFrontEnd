{"version":3,"sources":["api.js","hooks.js","Home.js","Navlist.js","CompanyInfo.js","CompanySearchForm.js","Errors.js","Companies.js","Job.js","CompanyJobs.js","Company.js","Jobs.js","LoginForm.js","SignupForm.js","Logout.js","ProfileForm.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","concat","process","headers","Authorization","token","params","axios","err","message","error","response","Array","isArray","getCompany","handle","this","company","getCompanies","param","companies","getJobs","jobs","signup","login","getUser","username","user","updateUser","apply","jobId","applied","localStorage","getItem","useHandleChange","initialState","setData","useState","e","name","value","target","d","useValidate","formErrors","setFormErrors","isSignUpForm","firstName","lastName","email","emailLength","emailName","match","password","password2","passwords","useErrors","apiErrors","setApiErrors","useCallback","errors","Home","_ref","_jsx","children","Jumbotron","_jsxs","_Fragment","className","Navlist","Navbar","color","NavbarBrand","href","Nav","NavItem","NavLink","CompanyInfo","isCompanyList","Card","body","outline","logoUrl","src","alt","CardTitle","tag","CardText","description","numEmployees","Button","Link","to","CompanySearchForm","handleSubmit","handleChange","Form","onSubmit","FormGroup","Label","htmlFor","InputGroup","Input","type","id","placeholder","onChange","InputGroupAddon","addonType","Errors","Object","keys","map","key","Alert","Companies","setCompanies","isLoading","setIsLoading","getApiErrors","history","useHistory","useEffect","async","push","Spinner","size","preventDefault","c","Job","job","apps","title","companyHandle","companyName","salary","equity","includes","disabled","onClick","CompanyJobs","j","Company","getApps","useParams","setCompany","Jobs","applicationErrors","setJobs","LoginForm","setErrors","Redirect","SignupForm","validate","dataObj","Logout","ProfileForm","getUserInfo","Routes","Container","Switch","Route","exact","path","App","setUsername","setApps","applications","removeItem","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.b9b33e13.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message;\n      !err.response ? message = \"Server error, please try again later\"\n        : message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  };\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  };\n\n  /** Get all companies or get by search params */\n\n  static async getCompanies(param = {}) {\n    let res = await this.request('companies', param);\n    return res.companies;\n  };\n\n  /** Get all jobs */\n\n  static async getJobs() {\n    let res = await this.request('jobs');\n    return res.jobs;\n  };\n\n  /** Register new user */\n\n  static async signup(data) {\n    let res = await this.request('auth/register', data, 'post');\n    return res.token;\n  };\n\n  /** Log in user */\n\n  static async login(data) {\n    let res = await this.request('auth/token', data, 'post');\n    return res.token;\n  };\n\n  /** Get user details */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  };\n\n  /** Update user */\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.user;\n  };\n\n  /** Apply for job */\n\n  static async apply(username, jobId) {\n    let res = await this.request(`users/${username}/jobs/${jobId}`, {}, 'post');\n    return res.applied;\n  };\n};\n\nJoblyApi.token = localStorage.getItem(\"token\");\n\nexport default JoblyApi;","import {useCallback, useState} from 'react';\n\nfunction useHandleChange(initialState={}) {\n    const [data, setData] = useState(initialState);\n    const handleChange = (e) => {\n        const {name, value} = e.target\n        setData(d => ({\n            ...d,\n            [name]: value\n        }));\n    };\n    return [data, handleChange, setData];\n};\n\nfunction useValidate() {\n    const [formErrors, setFormErrors] = useState({});\n\n    /** Validation for SignupForm and ProfileForm.\n     * Sets state to object with all form errors.\n     */\n    function validate(data, isSignUpForm) {\n        let err = {};\n        if (!data.firstName || data.firstName.length < 1 || data.firstName.length > 30) {\n            err.firstName = \"First name must be between 1 and 30 characters\";\n        } else {\n            delete(err.firstName);\n        };\n        if (!data.lastName || data.lastName.length < 1 || data.lastName.length > 30) {\n            err.lastName = \"Last name must be between 1 and 30 characters\";\n        } else {\n            delete(err.lastName);\n        };\n        if (!data.email || data.email.length < 6 || data.email.length > 60) {\n            err.emailLength = \"Email must be between 6 and 60 characters\";\n        } else {\n            delete(err.emailName);\n        };\n        if (data.email && !data.email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)){\n            err.email = \"Must be valid email address\";\n        } else {\n            delete(err.email);\n        };\n        if (data.password !== data.password2){\n            err.passwords = \"Passwords must match\";\n        }\n        if (isSignUpForm) {\n            if (!data.username || data.username.length < 1 || data.username.length > 30) {\n                err.username = \"Username must be between 1 and 30 characters\";\n            } else {\n                delete(err.username);\n            }\n            if (!data.password || data.password.length < 5 || data.password.length > 20) {\n                err.password = \"Password must be between 5 and 20 characters\";\n            } else {\n                delete(err.password);\n            };\n        } else {\n            if (data.password && (data.password.length < 5 || data.password.length > 20)) {\n                err.password = \"Password must be between 5 and 20 characters\";\n            } else {\n                delete(err.password);\n            };\n        }\n        setFormErrors(err);\n        return err;\n    };\n    return [formErrors, validate];\n};\n\nfunction useErrors() {\n    const [apiErrors, setApiErrors] = useState({});\n\n    /** Sets state with object containing all errors returned from API calls */\n    const getApiErrors = useCallback(e => {\n        const errors = {...e};\n        setApiErrors(errors);\n    }, [setApiErrors]);\n    return [apiErrors, getApiErrors, setApiErrors];\n};\n\nexport {useHandleChange, useValidate, useErrors};","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction Home({username}) {\n    return (\n        <div>    \n            <Jumbotron>   \n                {username ? \n                    <>\n                        <h1 className='display-4'>Welcome back to Jobly, {username}!</h1>\n                        <p className='lead'>Now get Jobling!</p>\n                    </>\n                :\n                    <>\n                        <h1 className='display-4'>Welcome to Jobly!</h1>\n                        <p className='lead'>The only site that lets you submit fake applications \n                            to fake jobs at fake companies, without even needing \n                            to upload a resume!\n                        </p>\n                    </>\n                }\n            </Jumbotron> \n        </div>\n    )\n};\n\nexport default Home;","import React from 'react';\n//import {NavLink} from 'react-router-dom';\nimport {Navbar, NavbarBrand, NavItem, NavLink, Nav} from 'reactstrap';\n\nfunction Navlist({username}){\n    return (\n        <Navbar color='info' className='Nav'>\n            <NavbarBrand href='/'>Jobly</NavbarBrand>\n            {username ? \n                <Nav>\n                    <NavItem>\n                        <NavLink href='/companies'>Companies</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href='/jobs'>Jobs</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href='/profile'>{username}</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href='/logout'>Log Out</NavLink>\n                    </NavItem>\n                </Nav>\n            :\n                <Nav>\n                    <NavItem>\n                        <NavLink href='/signup'>Register</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href='/login'>Log In</NavLink>\n                    </NavItem>\n                </Nav>\n            }\n        </Navbar>\n    )\n}\n\nexport default Navlist;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, CardTitle, CardText, Button } from 'reactstrap';\n\nfunction CompanyInfo({ company, isCompanyList }) {\n    return (\n        <div>\n            <Card body outline color='dark' className='CompanyCard'>\n                {company.logoUrl &&\n                    <img src={company.logoUrl}\n                        alt={`${company.name} Logo`}\n                        className='CompanyLogo' />}\n                <CardTitle tag='h3'>{company.name}</CardTitle>\n                <CardText>{company.description}</CardText>\n                <CardText>Employees: {company.numEmployees}</CardText>\n                {isCompanyList &&\n                    <Button color='info' tag={Link} to={`/companies/${company.handle}`} className='btn'>\n                        View Company\n                    </Button>\n                }\n            </Card>\n        </div>\n    )\n}\n\nexport default CompanyInfo;","import React from 'react';\nimport {\n    Button, Form, FormGroup, Label,\n    Input, InputGroup, InputGroupAddon\n} from 'reactstrap';\n\nfunction CompanySearchForm({ data, handleSubmit, handleChange }) {\n\n    return (\n        <Form className='CompanySearchForm' onSubmit={handleSubmit}>\n            <FormGroup>\n                <Label htmlFor='name'>Search Companies</Label>\n                <InputGroup>\n                    <Input type='text'\n                        name='name'\n                        id='name'\n                        placeholder='Company Name'\n                        value={data.name || ''}\n                        onChange={handleChange} />\n                    <InputGroupAddon addonType='append'>\n                        <Button color='info'>Submit</Button>\n                    </InputGroupAddon>\n                </InputGroup>\n            </FormGroup>\n        </Form>\n    )\n}\n\nexport default CompanySearchForm;","import React from 'react';\nimport {Alert} from 'reactstrap';\n\nfunction Errors({formErrors={}, apiErrors={}}) {\n    return (\n        <div>\n        {Object.keys(formErrors).map((key, e) => <Alert color='warning'\n                                                 key={e}>{formErrors[key]}</Alert>)}\n        {Object.keys(apiErrors).map((key, e) => <Alert color='danger'\n                                                 key={e}>{apiErrors[key]}</Alert>)}\n        </div>\n    )\n};\n\nexport default Errors;","import React, {useEffect, useState} from 'react';\nimport JoblyApi from './api';\nimport CompanyInfo from './CompanyInfo';\nimport {useHistory} from 'react-router-dom';\nimport {Spinner} from 'reactstrap';\nimport CompanySearchForm from './CompanySearchForm';\nimport { useHandleChange, useErrors } from './hooks';\nimport Errors from './Errors';\n\nfunction Companies({username}) {\n\n    const [companies, setCompanies] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, handleChange, setData] = useHandleChange();\n    const [apiErrors, getApiErrors, setApiErrors] = useErrors();\n    const history = useHistory();\n\n\n    useEffect(() => {\n        async function getCompanies() {\n\n            /** Redirect to login page if not logged in */\n            if (!username) {\n                history.push('/login');\n                return false;\n            };\n\n            /** Gets all companies from database */\n            try {\n                const companies = await JoblyApi.getCompanies();\n                setCompanies(companies); \n            } catch (e) {\n                getApiErrors(e);\n            };\n            setIsLoading(false);\n        }\n        getCompanies();\n    }, [setIsLoading, username, history, getApiErrors])\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg'/>\n    };\n\n\n    /** Submits search form and returns all companies that fit search criteria */\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        setApiErrors({});\n        try {\n            const companies = await JoblyApi.getCompanies(data);\n            setCompanies(companies);\n            setData('');\n        } catch (e) {\n            getApiErrors(e);\n        };\n        setIsLoading(false);\n    }\n\n    return (\n        <div>\n            <Errors apiErrors={apiErrors} />\n            <CompanySearchForm \n                data={data}\n                handleSubmit={handleSubmit}\n                handleChange={handleChange}/>\n            {companies.length === 0 &&\n                Object.keys(apiErrors).length === 0 &&\n                <p className='lead'>No companies fit the search criteria.</p>\n            }\n            {companies.map(c => \n                    <CompanyInfo company={c} key={c.handle}\n                        isCompanyList={true} />\n                )\n            }\n        </div>\n    )\n}\n\nexport default Companies;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, CardTitle, CardText, Button } from 'reactstrap';\n\nfunction Job({ username, job, apps, apply }) {\n    return (\n        <Card className='JobCard'>\n            <CardTitle tag='h4'>{job.title}</CardTitle>\n            <Link to={`/companies/${job.companyHandle}`} >\n                <h5>{job.companyName}</h5>\n            </Link>\n            <CardText>Salary: ${job.salary}</CardText>\n            <CardText>Equity: {job.equity}</CardText>\n            {apps.includes(job.id) ?\n                <Button disabled>Already Applied</Button>\n                :\n                <Button color='info' onClick={() => apply(username, job.id)}>Apply</Button>\n            }\n        </Card>\n    )\n}\n\nexport default Job;","import React from 'react';\nimport Job from './Job';\n\nfunction CompanyJobs({jobs, username, apps, apply}) {\n    return (\n        <>\n            {jobs.map(j => <Job job={j} \n                                key={j.id}\n                                username={username}\n                                apps={apps}\n                                apply={apply} />)}\n        </>\n    )\n};\n\nexport default CompanyJobs;","import React, { useEffect, useState } from 'react';\nimport {useParams, useHistory} from 'react-router-dom';\nimport {Spinner} from 'reactstrap';\nimport JoblyApi from './api';\nimport {useErrors} from './hooks';\nimport CompanyInfo from './CompanyInfo';\nimport Errors from './Errors';\nimport CompanyJobs from './CompanyJobs';\n\nfunction Company({username, apps, getApps, apply}) {\n\n    const { handle } = useParams();\n    const [company, setCompany] = useState();\n    const [isLoading, setIsLoading] = useState(true);\n    const [apiErrors, getApiErrors] = useErrors();\n    const history = useHistory();\n\n    useEffect(() => {\n\n        /** Redirect to login page if not logged in */\n        if (!username) {\n            history.push('/login');\n            return false;\n        };\n\n        /** Gets all info about company */\n        async function getCompany() {\n            try {\n                const company = await JoblyApi.getCompany(handle);\n                setCompany(company); \n            } catch (e) {\n                getApiErrors(e);\n            };\n            setIsLoading(false);\n        };\n        getApps(username);\n        getCompany();\n    }, [handle, username, history, getApps, getApiErrors]);\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg'/>\n    }\n\n    return (\n        <div className='Company'>\n            <Errors apiErrors={apiErrors} />\n            { Object.keys(apiErrors).length === 0 && \n                <>\n                    <CompanyInfo company={company}\n                                isCompanyList={false} />\n                    <h3>Jobs at {company.name}</h3>\n                    <CompanyJobs jobs={company.jobs}\n                                username={username}\n                                apps={apps}\n                                apply={apply} />\n                </>\n            }\n        </div>\n    )\n}\n\nexport default Company;","import React, {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {Spinner} from 'reactstrap';\nimport {useErrors} from './hooks';\nimport JoblyApi from './api';\nimport Job from './Job';\nimport Errors from './Errors';\n\n\nfunction Jobs({username, apps, getApps, apply, applicationErrors}) {\n\n    const [jobs, setJobs] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [apiErrors, getApiErrors] = useErrors();\n    const history = useHistory();\n\n    useEffect(() => {\n\n        /** Redirect to login page if not logged in */\n        if (!username) {\n            history.push('/login');\n            return false;\n        };\n\n        /** Gets all jobs from database */\n        async function getJobs() {\n            try {\n                const jobs = await JoblyApi.getJobs();\n                setJobs(jobs);\n                getApps(username);\n            } catch (e) {\n                getApiErrors(e);\n            };\n            setIsLoading(false);\n        };   \n        getJobs();\n    }, [setIsLoading, username, history, getApps, getApiErrors]);\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg'/>\n    };\n\n    return (\n        <div>\n            <h1>Jobly Jobs</h1>\n            <Errors formErrors={applicationErrors} \n                    apiErrors={apiErrors} />\n            {jobs.map(j => <Job username={username}\n                                job={j} \n                                key={j.id} \n                                apps={apps} \n                                apply={apply}/>)}\n        </div>\n    )\n}\n\nexport default Jobs;","import React, { useState } from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\nimport { useHandleChange, useErrors } from './hooks';\nimport JoblyApi from './api';\nimport Errors from './Errors';\n\nfunction LoginForm({ username, updateUser }) {\n\n    const initialState = { username: '', password: '' }\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [data, handleChange, setData] = useHandleChange(initialState);\n    const [apiErrors, getApiErrors, setApiErrors] = useErrors();\n    const history = useHistory();\n\n\n    /** Redirects to home if already logged in */\n    if (username) {\n        return <Redirect to='/' />\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setErrors({});\n        setApiErrors({});\n\n        /** Validates login form and sets error if missing fields */\n        if (!data.username || !data.password) {\n            setErrors({ error: \"Username and Password are required\" })\n            setData(initialState);\n            return false;\n        } else {\n            setIsLoading(true);\n\n            /** Checks for valid name/password combination.\n             * Returns API token.\n             * Runs function to put username and token into state and local storage.\n             */\n            try {\n                const token = await JoblyApi.login(data);\n                updateUser(data.username, token);\n                JoblyApi.token = token;\n                history.push('/');\n            } catch (e) {\n                getApiErrors(e);\n                setData(initialState);\n                setIsLoading(false);\n            };\n        };\n    };\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg' />\n    };\n\n    return (\n        <>\n            <h1 className='formheading'>Log In To Jobly</h1>\n            <Errors formErrors={errors}\n                apiErrors={apiErrors} />\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor='username'>Username</Label>\n                    <Input type='text'\n                        name='username'\n                        placeholder='Username'\n                        value={data.username}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='password'>Password</Label>\n                    <Input type='password'\n                        name='password'\n                        placeholder='Password'\n                        value={data.password}\n                        onChange={handleChange} />\n                </FormGroup>\n                <Button color='info'>Log In</Button>\n            </Form>\n        </>\n    )\n}\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport { Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\nimport { useHandleChange, useValidate, useErrors } from './hooks';\nimport JoblyApi from './api';\nimport Errors from './Errors';\n\nfunction SignupForm({ username, updateUser }) {\n\n    const initialState = {\n        username: '', password: '', password2: '',\n        firstName: '', lastName: '', email: ''\n    }\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, handleChange, setData] = useHandleChange(initialState);\n    const [formErrors, validate] = useValidate();\n    const [apiErrors, getApiErrors, setApiErrors] = useErrors();\n    const history = useHistory();\n\n\n    /** Redirects to home if already logged in */\n    if (username) {\n        return <Redirect to='/' />\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setApiErrors({})\n\n        /** Checks form for errors.\n         * If errors, stops form submission and sets errors object\n         */\n        const isSignUpForm = true;\n        const err = validate(data, isSignUpForm);\n        if (Object.keys(err).length > 0) {\n            return false;\n        } else {\n            setIsLoading(true);\n\n            /** Removes second password from data object */\n            const dataObj = data;\n            delete dataObj.password2;\n            setData(dataObj);\n\n            /** Submit new user to database.\n             * Get API token.\n             * Logs in new user by putting username/token into state and local storage\n             * Redirects to home\n             */\n            try {\n                const token = await JoblyApi.signup(data);\n                updateUser(data.username, token);\n                JoblyApi.token = token;\n                history.push('/');\n            } catch (e) {\n                getApiErrors(e);\n                setIsLoading(false);\n            };\n        };\n    };\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg' />\n    };\n\n    return (\n        <>\n            <h1 className='formheading'>Register For Jobly</h1>\n            <Errors formErrors={formErrors}\n                apiErrors={apiErrors} />\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor='username'>Username</Label>\n                    <Input type='text'\n                        name='username'\n                        placeholder='Username'\n                        value={data.username}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='password'>Password</Label>\n                    <Input type='password'\n                        name='password'\n                        placeholder='Password'\n                        value={data.password}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='password2'>Retype Password</Label>\n                    <Input type='password'\n                        name='password2'\n                        placeholder='Retype Password'\n                        value={data.password2}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='firstName'>First Name</Label>\n                    <Input type='text'\n                        name='firstName'\n                        placeholder='First Name'\n                        value={data.firstName}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='lastName'>Last Name</Label>\n                    <Input type='text'\n                        name='lastName'\n                        placeholder='Last Name'\n                        value={data.lastName}\n                        onChange={handleChange} />\n                </FormGroup>\n                <FormGroup>\n                    <Label htmlFor='email'>Email</Label>\n                    <Input type='text'\n                        name='email'\n                        placeholder='example@example.com'\n                        value={data.email}\n                        onChange={handleChange} />\n                </FormGroup>\n                <Button color='info'>Register</Button>\n            </Form>\n        </>\n    )\n}\n\nexport default SignupForm;","import {Redirect} from 'react-router-dom';\nimport { useEffect } from 'react';\nimport JoblyApi from './api';\n\nfunction Logout({updateUser}) {\n\n    /** Removes name and token from state and local storage */\n    useEffect(() => {\n        updateUser('', '');\n        JoblyApi.token = '';\n    }, [updateUser]);\n    \n\n    return <Redirect to='/' />\n};\n\nexport default Logout;","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\nimport { useHandleChange, useValidate, useErrors } from './hooks';\nimport JoblyApi from './api';\nimport Errors from './Errors';\n\nfunction ProfileForm({ username }) {\n\n    const initialState = { firstName: '', lastName: '', email: '' }\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [formErrors, validate] = useValidate();\n    const [data, handleChange, setData] = useHandleChange(initialState);\n    const [apiErrors, getApiErrors, setApiErrors] = useErrors();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function getUserInfo() {\n\n            /** Redirect to login page if not logged in */\n            if (!username) {\n                history.push('/');\n                return false;\n            };\n\n            /** Gets info about logged in user and sets initial form data */\n            try {\n                const user = await JoblyApi.getUser(username);\n                setData({\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    email: user.email\n                });\n            } catch (e) {\n                getApiErrors(e);\n            };\n        };\n        getUserInfo(username);\n        setIsLoading(false);\n    }, [username, setData, setIsLoading, history, getApiErrors]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setApiErrors({})\n\n        /** Checks form for errors.\n         * If errors, stops form submission and sets errors object\n         */\n        const isSignUpForm = false;\n        const err = validate(data, isSignUpForm);\n        if (Object.keys(err).length > 0) {\n            return false;\n        } else {\n            setIsLoading(true);\n\n            /** Removes second password from data object */\n            const dataObj = data;\n            delete dataObj.password2;\n            setData(dataObj);\n\n            /** Submits data to update user info and redirects to home */\n            try {\n                await JoblyApi.updateUser(username, data);\n                history.push('/');\n            } catch (e) {\n                getApiErrors(e);\n                setIsLoading(false);\n            };\n        };\n    };\n\n    if (isLoading) {\n        return <Spinner color='dark' size='lg' />\n    };\n\n    return (\n        <>\n            <h2 className='formheading'>Update User Info For {username}</h2>\n            <Errors formErrors={formErrors}\n                apiErrors={apiErrors} />\n            {Object.keys(apiErrors).length === 0 &&\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Label htmlFor='firstName'>First Name: </Label>\n                        <Input type='text'\n                            name='firstName'\n                            value={data.firstName}\n                            onChange={handleChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor='lastName'>Last Name: </Label>\n                        <Input type='text'\n                            name='lastName'\n                            value={data.lastName}\n                            onChange={handleChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor='password'>Password: </Label>\n                        <Input type='password'\n                            name='password'\n                            placeholder='New Password'\n                            value={data.password || ''}\n                            onChange={handleChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor='password2'>Retype New Password: </Label>\n                        <Input type='password'\n                            name='password2'\n                            placeholder='Retype New Password'\n                            value={data.password2 || ''}\n                            onChange={handleChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor='email'>Email: </Label>\n                        <Input type='text'\n                            name='email'\n                            value={data.email}\n                            onChange={handleChange} />\n                    </FormGroup>\n                    <Button color='info'>Update User Info</Button>\n                </Form>\n            }\n        </>\n    )\n}\n\nexport default ProfileForm;","import React from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Home from './Home';\nimport Navlist from './Navlist';\nimport Companies from './Companies';\nimport Company from './Company';\nimport Jobs from './Jobs';\nimport LoginForm from './LoginForm';\nimport SignupForm from './SignupForm';\nimport Logout from './Logout';\nimport ProfileForm from './ProfileForm';\nimport { Container } from 'reactstrap';\n\nfunction Routes({ username, updateUser, apps, getApps, apply, apiErrors }) {\n\n    return (\n        <Container>\n            <Navlist username={username} />\n            <Switch>\n                <Route exact path='/'>\n                    <Home username={username} />\n                </Route>\n                <Route exact path='/companies'>\n                    <Companies username={username} />\n                </Route>\n                <Route exact path='/companies/:handle'>\n                    <Company username={username}\n                        apps={apps}\n                        getApps={getApps}\n                        apply={apply} />\n                </Route>\n                <Route exact path='/jobs'>\n                    <Jobs username={username}\n                        apps={apps}\n                        getApps={getApps}\n                        apply={apply}\n                        applicationErrors={apiErrors} />\n                </Route>\n                <Route exact path='/login'>\n                    <LoginForm username={username}\n                        updateUser={updateUser} />\n                </Route>\n                <Route exact path='/signup'>\n                    <SignupForm username={username}\n                        updateUser={updateUser} />\n                </Route>\n                <Route exact path='/profile'>\n                    <ProfileForm username={username} />\n                </Route>\n                <Route exact path='/logout'>\n                    <Logout updateUser={updateUser} />\n                </Route>\n                <Redirect to='/' />\n            </Switch>\n        </Container>\n    )\n}\n\nexport default Routes;","import React, { useCallback, useState } from 'react';\nimport JoblyApi from './api';\nimport { useErrors } from './hooks';\nimport './App.css';\nimport Routes from './Routes';\n\nfunction App() {\n\n  const [username, setUsername] = useState(localStorage.getItem(\"username\"));\n  const [apps, setApps] = useState([]);\n  const [apiErrors, getApiErrors, setApiErrors] = useErrors();\n\n\n  /** Finds which jobs user has already applied for and sets apps state */\n\n  const getApps = useCallback(async () => {\n    const user = await JoblyApi.getUser(username);\n    setApps(user.applications);\n  }, [username]);\n\n\n  /** Applies for job in database */\n\n  async function apply(username, jobId) {\n    setApiErrors({});\n    try {\n      await JoblyApi.apply(username, jobId);\n      setApps([...apps, jobId]);\n    } catch (e) {\n      getApiErrors(e);\n    };\n  };\n\n\n  /** Puts logged in user into state and local storage */\n\n  function updateUser(name, token) {\n    setUsername(name);\n    if (name === '') {\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"token\");\n    } else {\n      localStorage.setItem(\"username\", name);\n      localStorage.setItem(\"token\", token);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Routes username={username}\n        updateUser={updateUser}\n        apps={apps}\n        getApps={getApps}\n        apply={apply}\n        apiErrors={apiErrors} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}